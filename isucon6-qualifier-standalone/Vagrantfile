Vagrant::DEFAULT_SERVER_URL.replace('https://vagrantcloud.com')
# -*- mode: ruby -*-
# vi: set ft=ruby :

#box = "bento/ubuntu-16.04"
box = "ubuntu/xenial64"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = box

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", inline: <<-SHELL
    set -e
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y --no-install-recommends ansible aptitude gcc git libc6-dev tzdata make
    snap install --classic go
    export GOPATH=/tmp/go
    mkdir -p ${GOPATH}/src/github.com/isucon/
    cd ${GOPATH}/src/github.com/isucon
    rm -rf isucon6-qualify
    git clone https://github.com/isucon/isucon6-qualify.git
    sed -i -e 's:--disable-phar::' -e '/go-install/s/1\.7/1.10/' isucon6-qualify/provisioning/image/ansible/02_xbuild.yml
    (
      cd isucon6-qualify/bench
      go get github.com/Songmu/timeout
      go get github.com/mitchellh/go-homedir
      go get github.com/PuerkitoBio/goquery
      go get github.com/marcw/cachecontrol
      make
    )
    (
      cd isucon6-qualify/provisioning/bench
      PYTHONUNBUFFERED=1 ANSIBLE_FORCE_COLOR=true ansible-playbook -i localhost, ansible/*.yml --connection=local
    )
    (
      cd isucon6-qualify
      make
      ln -s isupam_linux bin/isupam
    )
    (
      cd isucon6-qualify/provisioning/image/ansible
      PYTHONUNBUFFERED=1 ANSIBLE_FORCE_COLOR=true ansible-playbook -i localhost, *.yml --connection=local -t dev
    )
    (
      cd isucon6-qualify/provisioning/image
      ./db_setup.sh
    )
    rm -rf ${GOPATH}

    usermod -G sudo -a -s /bin/bash isucon

    echo "Provisioning Successful"
  SHELL
end
