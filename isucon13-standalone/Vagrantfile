# -*- mode: ruby -*-
# vi: set ft=ruby :

box = "generic/ubuntu2204"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = box

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", inline: <<-SHELL
    set -ex

    export HOME="/root"
    GITDIR="/tmp/isucon13"

    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y --no-install-recommends ansible curl git gnupg make openssh-server openssl sudo

    mkdir -p /etc/apt/keyrings
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
    NODE_MAJOR=20
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" > /etc/apt/sources.list.d/nodesource.list

    apt-get update
    apt-get install -y --no-install-recommends nodejs

    snap install go --channel=1.21/stable --classic

    rm -rf ${GITDIR}
    git clone --depth=1 https://github.com/isucon/isucon13.git ${GITDIR}

    # devドメインはHSTSが強制有効でブラウザでの動作確認が難しいためドメインを書き換える
    find ${GITDIR} -type f -exec sed -i -e "s/u\.isucon\.dev/u.isucon.local/g" {} +
    openssl req -subj '/CN=*.t.isucon.local' -nodes -newkey rsa:2048 -keyout ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.key -out ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.csr
    echo "subjectAltName=DNS.1:*.u.isucon.local, DNS.2:*.u.isucon.dev" > ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/extfile.txt
    openssl x509 -in ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.csr -req -signkey ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.key -sha256 -days 3650 -out ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.crt -extfile ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/extfile.txt
    cp -p ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.crt ${GITDIR}/provisioning/ansible/roles/nginx/files/etc/nginx/tls/_.u.isucon.local.issuer.crt
    mv ${GITDIR}/webapp/pdns/u.isucon.dev.zone ${GITDIR}/webapp/pdns/u.isucon.local.zone
    # 自己署名証明書を使用するため
    sed -i -e '/InsecureSkipVerify/s/false/true/' ${GITDIR}/bench/cmd/bench/benchmarker.go ${GITDIR}/bench/cmd/bench/bench.go

    sed -i -e "/symlink resolv.conf/,/^$/d" ${GITDIR}/provisioning/ansible/roles/powerdns/tasks/main.yml
    sed -i -e "s/{{ ansible_default_ipv4.address }}/127.0.0.1/" ${GITDIR}/provisioning/ansible/roles/isucon-user/templates/env.sh

    sed -i -e "s/_linux_amd64//" ${GITDIR}/provisioning/ansible/roles/bench/tasks/main.yaml
    (

      cd ${GITDIR}/bench
      go build -o ../provisioning/ansible/roles/bench/files/bench -buildvcs=false ./cmd/bench
    )
    (
      cd ${GITDIR}/frontend
      npm install -g corepack
      make
      npm uninstall corepack
      cp -r ./dist/ ../webapp/public/
    )
    (
      cd ${GITDIR}/envcheck
      CGO_ENABLED=0 go build -o ../provisioning/ansible/roles/envcheck/files/envcheck -buildvcs=false -ldflags "-s -w"
    )
    (
      cd ${GITDIR}
      tar zcf provisioning/ansible/roles/webapp/files/webapp.tar.gz webapp
    )
    (
      cd ${GITDIR}/provisioning/ansible
      ansible-playbook -i inventory/localhost application.yml
      ansible-playbook -i inventory/localhost benchmark.yml
    )
    rm -rf ${GITDIR}
    apt-get purge -y ansible nodejs
    apt-get autoremove -y

    rm -f /etc/apt/sources.list.d/nodesource.list
    rm -f /etc/apt/keyrings/nodesource.gpg

    snap remove go
  SHELL
end
